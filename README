--------------------------------------------------------
| Name: Cameron Hildebrandt, 1584696
| Name: Ramana Vasanthan, 1458497
| CMPUT 275, Winter 2019
| Final Project - Data Structure Visualizer
--------------------------------------------------------


Included Files:
  - BinHeap
    - client.cpp (Client)
    - heap.h
    - heap.cpp
    - heapsort.cpp
    - serialport.h
    - server.cpp
    - Makefile (Client)
    - Makefile (Server)

  - RBTree
    - client.cpp (Client)
    - RBTreeAux.h
    - RBTree.h
    - RBTreeInterface
    - serialport.h
    - serialport.cpp
    - Makefile (Client)
    - Makefile (Server)


Libraries Used:
  - cstdlib
  - iostream
  - string
  - stdio.h
  - termios.h
  - fcntl.h
  - sys/types.h
  - sys/stat.h
  - sys/ioctl.h
  - unistd.h
  - stdlib.h
  - time.h
  - heap.h
  - heap.cpp
  - vector
  - utility
  - algorithm
  - Arduino.h
  - Adafruit_ILI9341.h
  - math.h
  - serialport.h
  - serialport.cpp


Assumptions:
  - The user has some experience using Arduinos and understands the basics of
    an Arduino board
  - The user has a basic understanding of the command line.


Program Functionality:
  RBTree:
    This program builds off of the AVL trees from weekly exercise 7.
    This program was initially intended to display on the Arduino display,
    however, we were constrained by time and were not able to get the display
    working properly. Thus, the display parts that we had are still in the
    code, but they are commented out. This program can thus simply be run on
    the computer. The program accepts commands given the tree information
    about what values to store and delete. The commands will be displayed
    once the program is first opened.

    This program also has some error handling, such as if you input an invalid
    command. If you input a number too large for the data structure "int" or
    input non-number characters after an "I, R, or F" command, it will fail.

    Since we were unable to implement this on the Arduino, the output is
    a text representation of the tree (that we were working on using for the
    visualizer). For example, the tree:

               20(B)
         10(B)      30(B)
      1(R) 15(R) 22(R) 100(R)

    Would be represented by:
      20,1 10,1 1,0 R U R 15,0 R U U R 30,1 22,0 R U R 100,0 R U U U

    On a high level, this is printing the root node, then recursing down the
    left branch of the tree until it no longer can. Then, when it starts
    recursing up the left side, it begins recursing down each right child (an
    'R' is printed). Once it has explored the entire right sub tree, it
    recurses up and prints a 'U'. Each of the nodes is represented as the key
    of that node and the colour of that node (1 == Black, 0 == Red).

  BinHeap:
  	This program uses the BinaryHeap class implemented in class. The server and client work properly together to display the Binary Heap on the Adafruit display. Once the client is uploaded to the Arduino, the server can be run. A handshake will take place confirming communication between the Arduino and the computer. The program will ask for a command from the computer. A command of "N" followed by an integer, n, will create a new tree with n elements. The program will prompt the user to input n elements to the binary heap. Once all the values are inputted, the server will send all the values to the Arduino which will then use the visualization algorithm to print the tree to the screen. Due to the screen size limitations, it is recommended to use 16 values or less. More can still be inputted if needed but the formatting will look off. "I" is used followed by an integer to input the given value to the binary heap. After inserting, the values are sent to the Arduino again to be printed. "P" is used to pop the minimum value from the binary heap, after which the values will be sent to the Arduino again to be printed.

  	Heapsort was also implemented on the Arduino to sort the values in O(nlogn) time. THe values are sorted from lowest to greatest and displayed on the screen along with the runtime in microseconds.


Running Instructions:

  RBTree:
    The Makefile targets are:
      - make (all) - compile all files to produce the executable "RBtree"
      - make clean - remove all object and 'mid-compiling' files
      - make clall - remove the executable too.

    To run this program, simply type "make" then "./RBTree". To continue
    using the program, follow the onscreen instructions.

  BinHeap:
  	Server:
    The Makefile targets are:

    - make (all) - compile the necessary server files to make the executable "server"
    - make clean - remove all the objects and executables

    First, wire the Adafruit ILI9341 display to the Arduino acording to the "Wiring for Adafruit ILI9341" instructions on eClass. Then connect the Arduino to the oputer via USB cable. To run, type "make upload" in the client directory and then type "make" in the server directory followed by ./server to start the server.

Known Limitations:
  - The visualization of the red-black tree was not entirely functional, and
    thus had to be cut out for the presentation. The code for displaying the
    RBTree is still in the files, however it is simply commented out.


References:
  - Red Black Tree - https://en.wikipedia.org/wiki/Redâ€“black_tree
  - WE7 Files - https://eclass.srv.ualberta.ca/mod/resource/view.php?id=3507236
  - Binary Heap Documentation - Lecture 17 Class Notes
  - HeapSort - https://www.geeksforgeeks.org/heap-sort/
  - Serial Port files - Assignent 2 files on eClass
