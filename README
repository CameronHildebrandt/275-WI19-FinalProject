--------------------------------------------------------
| Name: Cameron Hildebrandt, 1584696
| Name: Ramana Vasanthan, 1458497
| CMPUT 275, Winter 2019
| Final Project - Red-Black Tree Visualizer
--------------------------------------------------------


Included Files:
  - BinHeap
    - client.cpp (Arduino)
    - heap.h
    - heap.cpp
    - heapsort.cpp
    - serialport.h
    - serialport.cpp
    - Makefile (Arduino)
    - Makefile (Server)

  - RBTree
    - client.cpp (Arduino)
    - RBTreeAux.h
    - RBTree.h
    - RBTreeInterface
    - serialport.h
    - serialport.cpp
    - Makefile (Arduino)
    - Makefile (Server)


Libraries Used:
  - cstdlib
  - iostream
  - string
  - stdio.h
  - termios.h
  - fcntl.h
  - sys/types.h
  - sys/stat.h
  - sys/ioctl.h
  - unistd.h
  - stdlib.h
  - time.h
  - heap.h
  - heap.cpp
  - vector
  - utility
  - algorithm
  - Arduino.h
  - Adafruit_ILI9341.h
  - math.h


Assumptions:
  - The user has some experience using Arduinos and understands the basics of
    an Arduino board
  - The user has a basic understanding of the command line.


Program Functionality: NEEDS UPDATE
  RBTree:
    This program was initially intended to display on the Arduino display,
    however, we were constrained by time and were not able to get the display
    working properly. Thus, the display parts that we had are still in the
    code, but they are commented out. This program can thus simply be run on
    the computer. The program accepts commands given the tree information
    about what values to store and delete. The commands will be displayed
    once the program is first opened.

    Since we were unable to implement this on the arduino, the output is
    a text representation of the tree (that we were working on using for the
    visuallizer). For example, the tree:

               20(B)
         10(B)      30(B)
      1(R) 15(R) 22(R) 100(R)

    Would be represented by:
      20,1 10,1 1,0 R U R 15,0 R U U R 30,1 22,0 R U R 100,0 R U U U

    On a high level, this is printing the root node, then recursing down the
    left brnach of the tree until it no longer can. Then, when it starts
    recursing up the left side, it begins recursing down each right child (an
    'R' is printed). Once it has explored the entire right sub tree, it
    recurses up and prints a 'U'. Each of the nodes is represented as the key
    of that node and the colour of that node (1 == Black, 0 == Red).

  BinHeap:


    ***TODO***


Running Instructions: NEEDS UPDATE
  RBTree:
    The Makefile targets are:
      - make (all) - compile all files to produce the executable "RBtree"
      - make clean - remove all object and 'mid-compiling' files
      - make clall - remove the executable too.

    To run this program, simply type "make" then "./RBTree". To continue
    using the program, follow the onscreen isntructions.

  BinHeap:
    The Makefile targets are:

      ***TODO***

Known Limitations:
  - The visuallization of the red-black tree was not entirely fucntional, and
    thus had to be cut out for the presentation. The code for displaying the
    RBTree is still in the files, however it is simply commented out.


Additional Notes:
  - ?????


References:
  - Red Black Tree - https://en.wikipedia.org/wiki/Redâ€“black_tree
  - WE7 Files - https://eclass.srv.ualberta.ca/mod/resource/view.php?id=3507236
